import open3d as o3d
import numpy as np

ply_point_cloud = o3d.data.PLYPointCloud()
point_cloud = o3d.io.read_point_cloud(ply_point_cloud.path)

o3d.visualization.draw_geometries([point_cloud])

points = np.asarray(point_cloud.points)

distance_threshold = 0.02
ransac_n = 3

plane_model, inliers = point_cloud.segment_plane(distance_threshold, ransac_n, 300, 0.999)

inliers_mask = np.array(inliers)

inlier_points = points[inliers_mask]

plane_cloud = o3d.geometry.PointCloud()
plane_cloud.points = o3d.utility.Vector3dVector(inlier_points)

outlier_cloud = o3d.geometry.PointCloud()

o3d.visualization.draw_geometries([plane_cloud])



///////////////

import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.pyplot as plt


def plot_convex_hull(data):
    white_pixels = data[data[:, 2] == 1]  # Select only white pixels
    white_coordinates = white_pixels[:, :2]  # Extract X, Y coordinates

    if len(white_coordinates) < 3:
        print("Convex hull cannot be formed with less than 3 points.")
        return

    hull = ConvexHull(white_coordinates)

    plt.scatter(white_coordinates[:, 0], white_coordinates[:, 1], color='white', label='White Pixels')

    for simplex in hull.simplices:
        plt.plot(white_coordinates[simplex, 0], white_coordinates[simplex, 1], 'r-')

    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.title('Convex Hull around White Pixels')
    plt.legend()
    plt.show()


# Generate example input data (replace this with your actual input data)
input_data = np.array([
    [1.0, 2.0, 1],
    [3.0, 4.0, 0],
    [5.0, 6.0, 1],
    [6.0, 9.0, 1],
    [7.0, 12.0, 0],
    [10.0, 15.0, 1],
    # ... (more data)
])

plot_convex_hull(input_data)
